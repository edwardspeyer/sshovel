#!/usr/bin/env python
"""
ssh-crypt: encrypt and decrypt files using ssh keys.
"""

from collections import namedtuple
import StringIO
import argparse
import atexit
import fcntl
import hashlib
import os
import os.path
import pty
import re
import shutil
import signal
import socket
import struct
import subprocess
import sys
import tempfile
import time
import unittest


class UserException(Exception):
    """
    Exception for alerting the user with messages (and not full stack traces.)
    """
    pass


def log(message):
    script = os.path.basename(sys.argv[0])
    message = "{}: {}\n".format(script, message)
    sys.stderr.write(message)


def assert_exists(path):
    """
    Check file exists and is a file, or alert the user.
    """
    if not os.path.exists(path):
        raise UserException('file not found: {}'.format(path))
    if os.path.isdir(path):
        raise UserException('exists, but is a directory: {}'.format(path))


class Packer(object):
    """
    Pack and unpack length prefixed binary data, as defined by the SSH
    standards.
    """

    @staticmethod
    def byte(a_byte):
        return struct.pack('>B', a_byte)

    @staticmethod
    def long(a_long):
        return struct.pack('>L', a_long)

    @staticmethod
    def string(a_string):
        length = len(a_string)
        template = '>L{}s'.format(length)
        return struct.pack(template, length, a_string)

    @classmethod
    def for_socket(cls, a_socket):
        return cls(a_socket.recv, a_socket.sendall)

    @classmethod
    def for_file(cls, a_file):
        return cls(a_file.read, a_file.write)

    def __init__(self, read_fn, write_fn):
        self.read_fn = read_fn
        self.write_fn = write_fn

    def write(self, *values):
        body = ''.join(values)
        length = len(body)
        self.write_fn(self.long(length))
        self.write_fn(body)

    def read_byte(self):
        return self.unpack(1, '>B')

    def read_long(self):
        return self.unpack(4, '>L')

    def read_string(self, max_length=None):
        length = self.read_long()
        if max_length is not None and length > max_length:
            raise UserException(
                "string length is {}b which is longer than expected (> {}b)"
                .format(length, max_length))
        template = '{}s'.format(length)
        return self.unpack(length, template)

    def unpack(self, length, template):
        some_bytes = self.read_fn(length)
        return struct.unpack(template, some_bytes)[0]


class PackerTest(unittest.TestCase):
    def test_read_then_write(self):
        message = "Hello, world!"
        sio = StringIO.StringIO()
        pack = Packer.for_file(sio)
        pack.write(pack.byte(99), pack.string(message))
        sio.seek(0)
        self.assertEqual(pack.read_long(), 18, "total pack length")
        self.assertEqual(pack.read_byte(), 99, "packed byte")
        self.assertEqual(pack.read_string(), message, "packed string")


class SSHAgentConnection(object):
    """
    Interface to a running ssh-agent(1)
    """

    Key = namedtuple('Key', 'blob comment')

    # https://tools.ietf.org/id/draft-miller-ssh-agent-00.html
    AGENTC_REQUEST_IDENTITIES = 11
    AGENT_IDENTITIES_ANSWER = 12
    AGENTC_SIGN_REQUEST = 13
    AGENT_SIGN_RESPONSE = 14
    AGENT_RSA_SHA2_256 = 2
    AGENT_RSA_SHA2_512 = 4

    def __init__(self, socket_path):
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM, 0)
        sock.connect(socket_path)
        self.packer = Packer.for_socket(sock)

    def identities(self):
        self.packer.write(
            self.packer.byte(SSHAgentConnection.AGENTC_REQUEST_IDENTITIES))
        _ = self.packer.read_long()  # length
        response = self.packer.read_byte()
        assert response == SSHAgentConnection.AGENT_IDENTITIES_ANSWER
        num_keys = self.packer.read_long()
        result = []
        for _ in range(num_keys):
            blob = self.packer.read_string()
            comment = self.packer.read_string()
            key = SSHAgentConnection.Key(blob, comment)
            result.append(key)
        return result

    def sign(self, key, message, flags=0):
        self.packer.write(
            self.packer.byte(SSHAgentConnection.AGENTC_SIGN_REQUEST),
            self.packer.string(key.blob),
            self.packer.string(message),
            self.packer.long(flags)
        )
        _ = self.packer.read_long()  # length
        response = self.packer.read_byte()
        assert response == SSHAgentConnection.AGENT_SIGN_RESPONSE
        signature = self.packer.read_string()
        return signature


class SSHTestFixture(object):
    """
    Set up a real ssh-agent(1) and load it with a test key, and provide a way
    to kill the agent.
    """

    TEST_KEY = """
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQD0OCPZ50akyXxhyFz/JdCTZISvHJ+nFOnXMHKQzF3Q3fAbXGVM
jEU2Wer+owj6s4wxuNmd6g3XAyyomCSRoxE6txNpQ10Yay4ZUMhO3XDr3zN5WBhd
6dqDjNLsrfu5mjy9aWFZDpBYnmRnOQBeLGxNQE6shbwOAzsixirmiUyXBQIDAQAB
AoGAZwCallgGIpBcZn10Q6S2UMQPdi/TYkveyITFfS7Ezsgccd3JV7y9oEvSYi1v
JxW9Jmd5WTITPkE3f7ATlF07cT5EZaHPMHm02GJegopN1AW2caoN2N+FHpe2cnOW
0vLtV+dQ0j5QnCWOfPpM70wYqEwvO+tC9uIaIOCBVTdyF20CQQD7IxTeZjiirZ0M
SlSPZmNRlFBRUkHjc4I7A5weV5L5YR/LWN2W/RL0j+v60L18Uld0pGcDuYX1Fg42
oUYEazaLAkEA+PLEMtU7vh3d9PtyDyIG7prcAJnUljwybRgZoVQNMsMxxONbSoAb
B9tw8irock7zjkPYsqvjSAxcfV1I+J6qrwJBAJaFQEzMF8XpKOfk5SnNxFlw+3LC
Spt47+VPFJNbCcxOWjAW4zlMFcBfQqDh27BX6fMPVm71E0UCIyK7JqwfVmECQAJ8
8qcLaIhy5ff/11j9XxJda9t5rh0+Rsa+Wes52tPqDYJJP21UMHD4qX1SHnaeAWMn
nG/UtfXPYdFC8GrDszMCQHNHjkRPhgnFKZBIqg6CjWE0wVWdZRWwLrP7a2YQsX4A
aZkvLueqxAr5SzU9sTiL6tBQAEaESEHOTm11g+IRmFA=
-----END RSA PRIVATE KEY-----
"""

    def __init__(self):
        self.start_agent()
        self.load_keys()

    def start_agent(self):
        output = subprocess.check_output('ssh-agent')
        self.socket_path = re.search('SSH_AUTH_SOCK=(.+?);', output).group(1)
        pid_str = re.search(r'SSH_AGENT_PID=(\d+)', output).group(1)
        self.agent_pid = int(pid_str)

    def load_keys(self):
        key_name = 'a_test_ssh_key'
        key_file = tempfile.NamedTemporaryFile(prefix=key_name + '.')
        key_file.write(self.TEST_KEY)
        key_file.flush()
        ssh_add_env = dict(os.environ)
        ssh_add_env['SSH_AUTH_SOCK'] = self.socket_path
        subprocess.check_output(
            ['ssh-add', key_file.name],
            env=ssh_add_env,
            stderr=subprocess.PIPE)

    def stop(self):
        os.kill(self.agent_pid, signal.SIGKILL)


class SSHAgentConnectionTest(unittest.TestCase):
    def setUp(self):
        self.ssh_fixture = SSHTestFixture()

    def test_identities(self):
        ssh = SSHAgentConnection(self.ssh_fixture.socket_path)
        keys = ssh.identities()
        self.assertEqual(len(keys), 1, "number of keys loaded in agent")

    def test_sign(self):
        ssh = SSHAgentConnection(self.ssh_fixture.socket_path)
        key = ssh.identities()[0]
        message = "Hello, world!"
        expected_digest = "791c659db0f314126ff0226beaa25aa6b8c4f00e"
        for _ in range(0, 3):
            signature = ssh.sign(key, message)
            actual_digest = hashlib.sha1(signature).hexdigest()
            self.assertEqual(expected_digest, actual_digest)

    def tearDown(self):
        self.ssh_fixture.stop()


class Scrypt(object):
    """
    Interface to the scrypt(1) command line tool.
    """

    def encrypt(self, in_file, out_file, passphrase):
        assert_exists(in_file)
        pid, fd = self.fork('enc', in_file, out_file)
        self.send_passphrase(fd, passphrase)
        self.send_passphrase(fd, passphrase)
        log("encrypting with scrypt...")
        os.waitpid(pid, 0)
        log("done!")

    def decrypt(self, in_file, out_file, passphrase):
        assert_exists(in_file)
        pid, fd = self.fork('dec', in_file, out_file)
        self.send_passphrase(fd, passphrase)
        log("decrypting with scrypt...")
        os.waitpid(pid, 0)
        log("done!")

    @staticmethod
    def fork(command, in_file, out_file):
        pid, fd = pty.fork()
        if pid == 0:
            os.execlp('scrypt', 'scrypt', command, in_file, out_file)
        fcntl.fcntl(fd, fcntl.F_SETFL, os.O_NONBLOCK)
        return pid, fd

    def send_passphrase(self, fd, passphrase):
        self.expect(fd, "passphrase: ", 1)
        os.write(fd, passphrase)
        os.write(fd, "\n")
        os.fsync(fd)
        self.expect(fd, "\r\n", 1)

    @staticmethod
    def expect(fd, phrase, timeout):
        start_time = time.time()
        buf = []
        while 1:
            try:
                byte = os.read(fd, 1)
                if byte == '':
                    msg = "EOF after reading: " + ''.join(buf)
                    raise UserException(msg)
                buf.append(byte)
            except OSError:
                duration = time.time() - start_time
                if duration > timeout:
                    msg = "timed out waiting for '{}'".format(phrase)
                    raise UserException(msg)
                time.sleep(0.1)
            if ''.join(buf).endswith(phrase):
                return


class TestFiles(object):
    """
    Some test files, the first of which contains a known message.  Useful when
    testing encrypt(f1, f2) and decrypt(f2, f3).
    """

    def __init__(self, message):
        self.f0 = tempfile.NamedTemporaryFile()
        self.f1 = tempfile.NamedTemporaryFile()
        self.f2 = tempfile.NamedTemporaryFile()
        self.f0.write(message)
        self.f0.flush()


class ScryptTest(unittest.TestCase):
    message = "Hello, world!"

    def setUp(self):
        self.files = TestFiles(self.message)

    def test_encrypt_then_decrypt(self):
        scrypt = Scrypt()
        scrypt.encrypt(self.files.f0.name, self.files.f1.name, 'PASSPHRASE')
        scrypt.decrypt(self.files.f1.name, self.files.f2.name, 'PASSPHRASE')
        self.assertEqual(self.message, self.files.f2.read())


class SSHScrypt(object):
    """
    Interface to scrypt(1) that uses an ssh-agent(1) to generate the scrypt
    passphrase.
    """

    MAGIC = "https://haz.cat/ssh-crypt"

    def encrypt(self, in_file, out_file, ssh, key):
        assert_exists(in_file)
        nonce = SSHScrypt.checksum(in_file)
        signature = ssh.sign(key, nonce)
        passphrase = hashlib.sha1(signature).hexdigest()
        tmp_file = self.tmp_for(out_file)
        Scrypt().encrypt(in_file, tmp_file, passphrase)
        with open(out_file, 'w') as out_io:
            out_io.write(Packer.string(SSHScrypt.MAGIC))
            out_io.write(Packer.string(nonce))
            with open(tmp_file) as tmp_io:
                shutil.copyfileobj(tmp_io, out_io)

    def decrypt(self, in_file, out_file, ssh, key):
        assert_exists(in_file)
        passphrase = None
        tmp_file = self.tmp_for(out_file)
        with open(in_file) as in_io:
            packer = Packer.for_file(in_io)
            magic = packer.read_string(100)
            if magic != self.MAGIC:
                raise UserException(
                    "input file is not in a recognisable format")
            nonce = packer.read_string()
            signature = ssh.sign(key, nonce)
            passphrase = hashlib.sha1(signature).hexdigest()
            with open(tmp_file, 'w') as tmp_io:
                shutil.copyfileobj(in_io, tmp_io)
        Scrypt().decrypt(tmp_file, out_file, passphrase)

    @staticmethod
    def checksum(path):
        sha = hashlib.sha1()
        with open(path, 'rb') as f:
            for block in iter(lambda: f.read(4096), b""):
                sha.update(block)
        return sha.hexdigest()

    @staticmethod
    def tmp_for(path):
        dirname = os.path.dirname(path)
        if dirname == '':
            dirname = '.'
        basename = os.path.basename(path)
        fd, tmp_file = tempfile.mkstemp(prefix='.'+basename, dir=dirname)
        os.close(fd)
        atexit.register(lambda: os.remove(tmp_file))
        return tmp_file


class SSHScryptTest(unittest.TestCase):
    message = "Hello, secret world!"

    def setUp(self):
        self.ssh_fixture = SSHTestFixture()
        self.files = TestFiles(self.message)

    def test_encrypt_then_decrypt(self):
        ssh = SSHAgentConnection(self.ssh_fixture.socket_path)
        key = ssh.identities()[0]
        scrypt = SSHScrypt()
        scrypt.encrypt(self.files.f0.name, self.files.f1.name, ssh, key)
        scrypt.decrypt(self.files.f1.name, self.files.f2.name, ssh, key)
        self.assertEqual(self.message, self.files.f2.read())

    def tearDown(self):
        self.ssh_fixture.stop()


def main(args):
    parser = argparse.ArgumentParser(description='Encrypt files with ssh keys')
    parser.add_argument(
        '--encrypt',
        nargs=2,
        metavar=('IN', 'OUT'),
        help='')
    parser.add_argument(
        '--decrypt',
        nargs=2,
        metavar=('IN', 'OUT'),
        help='')
    parser.add_argument(
        '--key',
        metavar='MATCH',
        help='use the ssh key whose comment matches MATCH')
    parser.add_argument(
        '--test',
        nargs='*',
        metavar='ARGS',
        help='run the test suite')
    args = parser.parse_args(args)

    if args.test is not None:
        unittest_args = [__file__]
        unittest_args.extend(args.test)
        unittest.main(argv=unittest_args)

    if not(args.encrypt or args.decrypt):
        parser.error("please select one of --encrypt or --decrypt")

    socket_path = os.environ.get('SSH_AUTH_SOCK')
    if socket_path == "":
        parser.error("SSH_AUTH_SOCK is empty or unset")

    ssh = SSHAgentConnection(socket_path)
    keys = ssh.identities()
    if not keys:
        parser.error("ssh agent has no keys")

    key = keys[0]
    if args.key:
        matches = []
        for candidate in keys:
            if args.key in candidate.comment:
                matches.append(candidate)
        if not matches:
            parser.error(
                "no ssh key matched '{}'; known keys: {}"
                .format(args.key, [k.comment for k in keys]))
        elif len(matches) == 1:
            key = matches[0]
        else:
            parser.error(
                "more than one key matched '{}': {}"
                .format(args.key, [k.comment for k in matches]))

    if args.encrypt:
        log("using key '{}'".format(key.comment))
        in_file, out_file = args.encrypt
        SSHScrypt().encrypt(in_file, out_file, ssh, key)
    elif args.decrypt:
        log("using key '{}'".format(key.comment))
        in_file, out_file = args.decrypt
        SSHScrypt().decrypt(in_file, out_file, ssh, key)


class MainTest(unittest.TestCase):
    message = "SUPER SECRET FILE CONTENTS"

    def setUp(self):
        self.files = TestFiles(self.message)
        self.ssh_fixture = SSHTestFixture()
        os.environ['SSH_AUTH_SOCK'] = self.ssh_fixture.socket_path

    def test_encrypt(self):
        main(['--encrypt', self.files.f0.name, self.files.f1.name])
        main(['--decrypt', self.files.f1.name, self.files.f2.name])
        self.assertEqual(self.message, self.files.f2.read())

    def tearDown(self):
        self.ssh_fixture.stop()


try:
    main(sys.argv[1:])
except UserException as ex:
    log(ex.message)
    sys.exit(1)
